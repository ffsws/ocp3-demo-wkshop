apiVersion: v1
kind: BuildConfig
metadata:
  labels:
    build: dc-pipeline
  name: dc-pipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
spec:
  runPolicy: Serial
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def tag,altTag
        pipeline {
          agent any
          stages{
            stage('Build in Dev') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("dc-dev") {
                      openshift.startBuild("metro", "--wait=true")
                    }
                  }
                }
              }
            }
            stage('Test in Dev') {
              steps {
                sleep 5
              }
            }
            stage('Deploy to Prod (non-live)') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("dc-prod") {
                      def route = openshift.selector("route", "metro-prod").object()
                      openshift.tag("dc-dev/metro:latest", "dc-prod/metro:prod-blue")
                    }
                  }
                }
              }
            }
            stage('Integration Test in Prod (non-live)') {
              steps {
                sleep 5
              }
            }
            stage('Approve Go Live') {
              steps {
                timeout(time:15, unit:'MINUTES') {
                  input message: "Go Live in Production (switch to new version)?", ok: "Go Live"
                }
              }
            }
            stage('Make Live in Prod') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("dc-prod") {
                      openshift.tag("dc-dev/metro:latest", "dc-prod/metro:prod-green")
                    }
                  }
                }
              }
            }
          }
        }
